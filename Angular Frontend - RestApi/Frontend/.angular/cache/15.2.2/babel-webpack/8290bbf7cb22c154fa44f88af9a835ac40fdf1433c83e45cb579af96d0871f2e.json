{"ast":null,"code":"import { Notify } from 'notiflix';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./restapi.service\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"ngx-spinner\";\nimport * as i4 from \"@angular/router\";\nexport class AppComponent {\n  constructor(itemService, titleService, spinner) {\n    this.itemService = itemService;\n    this.spinner = spinner;\n    titleService.setTitle('Express Server Test Frontend');\n  }\n  getData(id) {\n    this.spinner.show();\n    setTimeout(() => {\n      this.spinner.hide();\n    }, 1000);\n    try {\n      var id2;\n      if (id == \"\") {\n        id2 = 0;\n      } else {\n        id2 = parseInt(id);\n      }\n      if (id2 > 0 && id2 < 1001) {\n        this.itemService.getItems(id).subscribe(data => {\n          this.returnItem = data;\n        });\n        Notify.success('Accion realizada correctamente.');\n      } else if (id2 > 1000) {\n        Notify.failure('Valor superior a los registros.');\n      } else {\n        Notify.warning('Existen campos vacios.');\n      }\n    } catch (exception) {\n      Notify.failure('Error en obtener informacion del servidor. Codigo: ' + exception);\n    } finally {}\n  }\n  ngOnInit() {}\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.ItemService), i0.ɵɵdirectiveInject(i2.Title), i0.ɵɵdirectiveInject(i3.NgxSpinnerService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 5,\n  vars: 0,\n  consts: [[\"bdColor\", \"rgba(51,51,51,0.8)\", \"size\", \"medium\", \"color\", \"#fff\", \"type\", \"ball-scale-multiple\"], [2, \"font-size\", \"20px\", \"color\", \"white\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0, \"div. \");\n      i0.ɵɵelementStart(1, \"ngx-spinner\", 0)(2, \"p\", 1);\n      i0.ɵɵtext(3, \"Loading...\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(4, \"router-outlet\");\n    }\n  },\n  dependencies: [i4.RouterOutlet, i3.NgxSpinnerComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAEA,SAASA,MAAM,QAAQ,UAAU;;;;;;AAUjC,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,WAAwB,EAAEC,YAAmB,EAAUC,OAA0B;IAAjF,gBAAW,GAAXF,WAAW;IAA4C,YAAO,GAAPE,OAAO;IAChFD,YAAY,CAACE,QAAQ,CAAC,8BAA8B,CAAC;EACvD;EAEAC,OAAO,CAACC,EAAS;IAEf,IAAI,CAACH,OAAO,CAACI,IAAI,EAAE;IAEjBC,UAAU,CAAC,MAAK;MAEd,IAAI,CAACL,OAAO,CAACM,IAAI,EAAE;IACrB,CAAC,EAAE,IAAI,CAAC;IAEV,IACA;MACE,IAAIC,GAAG;MAEP,IAAGJ,EAAE,IAAI,EAAE,EAAC;QACVI,GAAG,GAAG,CAAC;OACR,MACG;QACFA,GAAG,GAAGC,QAAQ,CAACL,EAAE,CAAC;;MAGpB,IAAII,GAAG,GAAG,CAAC,IAAIA,GAAG,GAAG,IAAI,EACzB;QACE,IAAI,CAACT,WAAW,CAACW,QAAQ,CAACN,EAAE,CAAC,CAACO,SAAS,CAACC,IAAI,IAAG;UAC7C,IAAI,CAACC,UAAU,GAAGD,IAAI;QACxB,CAAC,CAAC;QAEFhB,MAAM,CAACkB,OAAO,CAAC,iCAAiC,CAAC;OAClD,MACI,IAAIN,GAAG,GAAG,IAAI,EAAC;QAClBZ,MAAM,CAACmB,OAAO,CAAC,iCAAiC,CAAC;OAClD,MAED;QACEnB,MAAM,CAACoB,OAAO,CAAC,wBAAwB,CAAC;;KAG3C,CACD,OAAOC,SAAS,EAChB;MACErB,MAAM,CAACmB,OAAO,CAAC,qDAAqD,GAAGE,SAAS,CAAC;KAClF,SACM;EAGT;EAEAC,QAAQ,IAER;;AAxDWrB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAAsB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZzBC,qBAEA;MAAAA,sCAKC;MAC0CA,0BAAU;MAAAA,iBAAI;MAIzDA,gCAA+B","names":["Notify","AppComponent","constructor","itemService","titleService","spinner","setTitle","getData","id","show","setTimeout","hide","id2","parseInt","getItems","subscribe","data","returnItem","success","failure","warning","exception","ngOnInit","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\PC1\\Documents\\HTML Proyects\\Angular Frontend - RestApi\\Frontend\\src\\app\\app.component.ts","C:\\Users\\PC1\\Documents\\HTML Proyects\\Angular Frontend - RestApi\\Frontend\\src\\app\\app.component.html"],"sourcesContent":["import { Component, OnInit} from '@angular/core';\nimport { ItemService } from './restapi.service';\nimport { Notify } from 'notiflix';\nimport { Title } from '@angular/platform-browser';\nimport { NgxSpinnerService } from \"ngx-spinner\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent implements OnInit {\n  \n  returnItem: any;\n\n  constructor(private itemService: ItemService, titleService: Title, private spinner: NgxSpinnerService) {\n    titleService.setTitle('Express Server Test Frontend');\n  }\n  \n  getData(id:string) {\n\n    this.spinner.show();\n\n      setTimeout(() => {\n\n        this.spinner.hide();\n      }, 1000);\n\n    try\n    {\n      var id2;\n\n      if(id == \"\"){\n        id2 = 0;\n      }\n      else{\n        id2 = parseInt(id);\n      }\n\n      if (id2 > 0 && id2 < 1001)\n      {\n        this.itemService.getItems(id).subscribe(data => {\n          this.returnItem = data;\n        });\n\n        Notify.success('Accion realizada correctamente.');\n      }\n      else if (id2 > 1000){\n        Notify.failure('Valor superior a los registros.');\n      }\n      else\n      {\n        Notify.warning('Existen campos vacios.');\n      }\n      \n    }\n    catch (exception)\n    {\n      Notify.failure('Error en obtener informacion del servidor. Codigo: ' + exception);\n    }\n    finally{\n      \n    }\n  }\n\n  ngOnInit() {\n    \n  }\n}\n","div.\n\n<ngx-spinner\n  bdColor=\"rgba(51,51,51,0.8)\"\n  size=\"medium\"\n  color=\"#fff\"\n  type=\"ball-scale-multiple\"\n>\n  <p style=\"font-size: 20px; color: white\">Loading...</p>\n</ngx-spinner>\n\n\n<router-outlet></router-outlet>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}